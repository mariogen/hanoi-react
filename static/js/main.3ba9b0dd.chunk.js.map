{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","fab","position","bottom","spacing","right","Game","classes","React","useState","state","setState","startState","setStartState","endState","setEndState","focus","setFocus","nMoves","setNMoves","nPins","setNPins","nDisks","setNDisks","open","setOpen","useEffect","Array","fill","map","x","range","cloneDeep","venceu","isEqual","w","window","innerWidth","h","Math","min","innerHeight","disk_xy","flatten","disks","disk","y","pins","i","restart","parse","max","parseInt","Fragment","width","height","concat","key","dx","dy","xScale","yScale","rx","dims","style","trunc","stroke","strokeWidth","opacity","last","onClick","isEmpty","newState","push","pop","Fab","color","className","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","TextField","label","value","onChange","event","target","variant","type","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3ba9b0dd.chunk.js","sourcesContent":["import React from 'react'\nimport { range, isEqual, flatten, last, isEmpty, cloneDeep } from 'lodash'\nimport Fab from '@material-ui/core/Fab';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme) => ({\n  fab: {\n    position: 'absolute',\n    bottom: theme.spacing(2),\n    right: theme.spacing(2),\n  }\n}));\n\n\nexport default function Game() {\n  const classes = useStyles();\n\n  const [state, setState] = React.useState([[]])\n  const [startState, setStartState] = React.useState(null)\n  const [endState, setEndState] = React.useState(null)\n  const [focus, setFocus] = React.useState(null)\n  const [nMoves, setNMoves] = React.useState(0)\n  const [nPins, setNPins] = React.useState(3)\n  const [nDisks, setNDisks] = React.useState(5)\n  const [open, setOpen] = React.useState(false)\n\n\n  React.useEffect(() => {\n    setFocus(null)\n    setNMoves(0)\n    const startState = Array(nPins).fill().map(x => [])\n    startState[0] = range(nDisks, 0)\n    setStartState(startState)\n    setState(cloneDeep(startState))\n    const endState = Array(nPins).fill().map(x => [])\n    endState[nPins - 1] = range(nDisks, 0)\n    setEndState(endState)\n    return () => { };\n  }, [nPins, nDisks])\n\n  const venceu = isEqual(state, endState) && nPins > 1\n\n  const onClick = (x) => {\n    if (x === focus) {\n      setFocus(null);\n    } else if (focus === null) {\n      setFocus(x);\n    } else if (isEmpty(state[x]) || (last(state[focus]) < last(state[x]))) {\n      let newState = cloneDeep(state)\n      newState[x].push(newState[focus].pop())\n      setState(newState)\n      setFocus(null)\n      setNMoves(nMoves + 1)\n    }\n  }\n\n  const w = window.innerWidth, \n        h = Math.min(3*w/4, window.innerHeight),\n        p = 50\n\n  const dims = (x, y, dx, dy) => {\n    const xScale = (x) => x / nPins * (w - 2 * p)\n    const yScale = (y) => y / nDisks * (h - 2 * p)\n    return ({\n      x: p + xScale(x + (1 - dx) / 2),\n      y: h - p - yScale(y + 1),\n      width: xScale(dx),\n      height: yScale(dy),\n      rx: yScale(1 / 4)\n    })\n  }\n\n  const disk_xy = flatten(state.map((disks, x) => disks.map((disk, y) => [disk, x, y])))\n  const pins = range(nPins).map(i => [0, i, nDisks - 1])\n\n  const restart = () => {\n    setState(startState);\n    setNMoves(0);\n  }\n\n  const parse = (x) => Math.max(1,parseInt(x) ? parseInt(x) : 1)\n\n  return (\n    <React.Fragment>\n      <svg width={w} height={h}>\n        {disk_xy.concat(pins).map(([disk, x, y]) => (\n          <rect key={`${disk}_${x}_${y}`}\n            {...dims(x, y, (disk + 1) / nDisks, disk ? 1 : nDisks)}\n            style={{\n              fill: disk ? `hsla(${Math.trunc(360 * disk / nDisks)},100%,50%,1.0)` : 'black',\n              stroke: 'black',\n              strokeWidth: disk ? 5 : 0,\n              opacity: (focus === x && last(state[x]) === disk) ? 1 : .5\n            }}\n            onClick={() => onClick(x)}\n          />\n        ))}\n      </svg>\n        <Fab color=\"secondary\" className={classes.fab}>\n          <EditIcon onClick={()=>setOpen(true)} />\n        </Fab>\n      <Dialog open={venceu} onClose={restart}>\n        <DialogTitle >{\"Venceu!!!\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText> VocÃª levou {nMoves} passos! Consegue fazer melhor? </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"primary\" onClick={restart}> Jogar de novo! </Button>\n        </DialogActions>\n      </Dialog>\n      <Dialog open={open} >\n        <DialogTitle>Configuration</DialogTitle>\n        <DialogContent>\n          <TextField\n            label=\"N pins\"\n            value={nPins}\n            onChange={(event) => {setNPins(parse(event.target.value))}}\n            variant=\"filled\" type=\"number\"\n          />\n          <TextField\n            label=\"N disks\"\n            value={nDisks}\n            onChange={(event) => {setNDisks(parse(event.target.value))}}\n            variant=\"filled\" type=\"number\"\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={()=>setOpen(false)} color=\"primary\">\n            OK\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </React.Fragment >\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}