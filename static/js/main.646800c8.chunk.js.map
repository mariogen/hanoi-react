{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ParamsExample","path","useStyles","makeStyles","theme","fab","display","flexDirection","position","marginTop","spacing","bottom","right","GameRouter","useParams","nPins","nDisks","parseInt","Game","classes","React","useState","state","setState","startState","setStartState","endState","setEndState","focus","setFocus","nMoves","setNMoves","audio","Audio","useEffect","Array","fill","map","x","range","cloneDeep","venceu","isEqual","w","window","innerWidth","h","innerHeight","disk_xy","flatten","disks","disk","y","pins","i","restart","Fragment","width","height","concat","key","dx","dy","xScale","yScale","rx","dims","style","Math","trunc","stroke","strokeWidth","opacity","last","onClick","isEmpty","play","newState","push","pop","className","Fab","color","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.646800c8.chunk.js","sourcesContent":["import React from 'react'\nimport { range, isEqual, flatten, last, isEmpty, cloneDeep } from 'lodash'\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useParams\n} from \"react-router-dom\";\n\nexport default function ParamsExample() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/:nPins/:nDisks\">\n          <GameRouter />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  fab: {\n    display: 'flex',\n    flexDirection: 'column',\n    position: 'absolute',\n    '& > *': { marginTop: theme.spacing(1) },\n    bottom: theme.spacing(1),\n    right: theme.spacing(1),\n  }\n}));\n\nconst GameRouter = () => {\n  let { nPins = 4, nDisks = 5 } = useParams();\n  return <Game nPins={parseInt(nPins)} nDisks={parseInt(nDisks)} />;\n}\n\nconst Game = ({ nPins = 4, nDisks = 5 }) => {\n  const classes = useStyles();\n\n  const [state, setState] = React.useState([[]])\n  const [startState, setStartState] = React.useState(null)\n  const [endState, setEndState] = React.useState(null)\n  const [focus, setFocus] = React.useState(null)\n  const [nMoves, setNMoves] = React.useState(null)\n  \n  const audio = new Audio(\"button1.ogg\");\n\n  React.useEffect(() => {\n    const startState = Array(nPins).fill().map(x => [])\n    startState[0] = range(nDisks, 0)\n    setStartState(startState)\n    setState(cloneDeep(startState))\n    const endState = Array(nPins).fill().map(x => [])\n    endState[nPins - 1] = range(nDisks, 0)\n    setEndState(endState)\n    return () => { };\n  }, [nPins, nDisks])\n\n  const venceu = isEqual(state, endState)\n\n  const onClick = (x) => {\n    if (x === focus) {\n      setFocus(null);\n    } else if (focus === null) {\n      setFocus(x);\n    } else if (isEmpty(state[x]) || (last(state[focus]) < last(state[x]))) {\n      audio.play();\n      let newState = cloneDeep(state)\n      newState[x].push(newState[focus].pop())\n      setState(newState)\n      setFocus(null)\n      setNMoves(nMoves + 1)\n    }\n  }\n\n  const w = window.innerWidth, h = window.innerHeight, p = 50\n\n  const dims = (x, y, dx, dy) => {\n    const xScale = (x) => x / nPins * (w - 2 * p)\n    const yScale = (y) => y / nDisks * (h - 2 * p)\n    return ({\n      x: p + xScale(x + (1 - dx) / 2),\n      y: h - p - yScale(y + 1),\n      width: xScale(dx),\n      height: yScale(dy),\n      rx: yScale(1 / 4)\n    })\n  }\n\n  const disk_xy = flatten(state.map((disks, x) => disks.map((disk, y) => [disk, x, y])))\n  const pins = range(nPins).map(i => [0, i, nDisks - 1])\n\n  const restart = () => {\n    setState(startState);\n    setNMoves(0);\n  }\n\n  return (\n    <React.Fragment>\n      <svg width={w} height={h}>\n          {disk_xy.concat(pins).map(([disk, x, y]) => (\n              <rect key={`${disk}_${x}_${y}`}\n                {...dims(x, y, (disk + 1) / nDisks, disk ? 1 : nDisks)}\n                style={{\n                  fill: disk ? `hsla(${Math.trunc(360 * disk / nDisks)},100%,50%,1.0)` : 'black',\n                  stroke: 'black',\n                  strokeWidth: disk ? 5 : 0,\n                  opacity: (focus === x && last(state[x]) === disk) ? 1 : .5\n                }}\n                onClick={() => onClick(x)}\n              />\n          ))}\n      </svg>\n      <div className={classes.fab}>\n        <Fab >\n          <AddIcon onClick={restart} />\n        </Fab>\n        <Fab color=\"secondary\">\n          <EditIcon />\n        </Fab>\n      </div>\n      <Dialog open={venceu} onClose={restart}>\n        <DialogTitle >{\"Venceu!!!\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText> VocÃª levou {nMoves} passos! Consegue fazer melhor? </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"primary\" onClick={restart}> Jogar de novo! </Button>\n        </DialogActions>\n      </Dialog>\n    </React.Fragment >\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}